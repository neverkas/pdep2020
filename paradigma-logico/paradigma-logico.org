#+TITLE: Apunte PDEP - Paradigma Lógico

[[https://app.mural.co/t/pdepmit6138/m/pdepmit6138/1592100921683/322a94a393db664a908221d60ab372a4845aced5][Mural Lógico]]

* Pendientes por leer
** Apuntes de la cátedra
  - [[https://docs.google.com/document/d/1I8Xvss7LBuUjV-GGiag7C8d9wa3vUB6B37Qi4LG-ts0/edit][Módulo 3 - Individuos Simples y compuestos]]
  - [[https://docs.google.com/document/d/1GGair_St5yWvItKRZH-FY_X2CdDREr60TrsV0zSiO5I/edit][Módulo 4 - Predicados de Orden superior]]
  - [[https://drive.google.com/open?id=16SMBS6i_wjkdcVztpUDb-WTfASnCXQjld7VyKLUpC8A][Módulo 5 - Recursividad]]
  - [[https://docs.google.com/document/d/1eWnjBoiQTRJKx4THhmPnGYbBWTDlgx4Fph18GPtIqC0/edit][Módulo 6 - Delegación, Acoplamiento]]
** WikiUqbar
   - [[http://wiki.uqbar.org/wiki/articles/paradigma-logico---un-poco-de-nomenclatura.html][nomenclatura]]
** Parciales resueltos
   - [[https://gist.github.com/fedescarpa/a8ff448588b725cd2301e7177bb02f31][Resolución - Medicamentos]]
   - [[https://gist.github.com/fedescarpa/ab1e7866786258a176bb8a15669552a5][Resolucion - REcu papanoel]]
* Errores frecuentes
** Between y Operadores Relaciones
   #+BEGIN_SRC prolog
     tipoDeAplicacion(Aridad,Argumentos, total):-
       0 is Argumentos - Aridad.
       % me parece que usar el == no quedaba tan bien (?)
       % Argumentos == Aridad.

    % estabas usando solo el operador < pero eso solo te devolvia Si/No
     tipoDeAplicacion(Aridad,Argumentos, parcial):-
    % al agregar el between, consulto que valores debe tener *Argumentos*
    % satisfacen estar entre 1 y Aridad
       between(1, Aridad, Argumentos),
    % y ahora el operador relacional, lo uso para restringir el dominio
       Argumentos < Aridad.

     tipoDeAplicacion(_, 0, sinAplicar).
   #+END_SRC
** Delegar y Forall 
   - Habia repeticion de logica, y faltaba delegar
   - AUNQUE EL DE REPETICION DE LOGICA IGUAL DEBERIA ANDAR, Y NO ANDA (?
   - 
   #+BEGIN_SRC prolog
     alHorno(Equipo):-
       % es Equipo si tiene al menos un participante
       perteneceA(_, Equipo),
       % es cierto que ParaTodo participante
       forall(
         % que pertenece al equipo
         perteneceA(Miembro, Equipo),
         % cumple esta condicion
         estanAlHorno(Miembro)
       ).

     estanAlHorno(Miembro):-
       nivelDeEnergia(Miembro, Energia),
       Energia < 10.

     estanAlHorno(Miembro):- fueraDeJuego(Miembro).
     /*
     alHorno(Equipo):-
       perteneceA(_, Equipo),
       forall(perteneceA(Miembro, Equipo),
         (nivelDeEnergia(Miembro, Energia),
          Energia < 10)
       ).
     alHorno(Equipo):-
       perteneceA(, Equipo),
       forall( perteneceA(Miembro, Equipo), 
         fueraDeJuego(Miembro)
       ).
     ,*/
   #+END_SRC
** Repeticion de Logica
   #+BEGIN_SRC prolog
     % metrosLanzamiento(Competidor, Metros)
     puntajeLanzamientoPrecision(Competidor, 10):-
       metrosLanzamiento(Competidor, Metros),
       between(9,11, Metros).

     puntajeLanzamientoPrecision(Competidor, 6):-
       metrosLanzamiento(Competidor, Metros),
       tieneSeisPuntos(Metros).

     puntajeLanzamientoPrecision(Competidor, 0):-
       metrosLanzamiento(Competidor, Metros),
       tieneCeroPuntos(Metros).

     tieneCeroPuntos(Metros):- Metros < 7.
     tieneCeroPuntos(Metros):- Metros > 15.

     tieneSeisPuntos(Metros):- between(7,8, Metros).
     tieneSeisPuntos(Metros):- between(12,15, Metros).


     /*
     % Habia repeticion de logica
     puntajeLanzamientoPrecision(Competidor, 0):-
       metrosLanzamiento(Competidor, Metros),
       Metros < 7.

     puntajeLanzamientoPrecision(Competidor, 0):-
       metrosLanzamiento(Competidor, Metros),
       Metros > 15.

     puntajeLanzamientoPrecision(Competidor, 6):-
       metrosLanzamiento(Competidor, Metros),
       between(7,8, Metros).

     puntajeLanzamientoPrecision(Competidor, 6):-
       metrosLanzamiento(Competidor, Metros),
       between(12,15, Metros).
       */

   #+END_SRC

** Generador y Negacion del Existencial
   #+BEGIN_SRC prolog
     abandono(Equipo):-
       % (generador)
       % le damos un dominio al existencial
       % para validar si esta en la base de conocimientos o no
       equipo(Equipo),
       % (negamos el existencial)
       % no es cierto que alguien pertenece
       not(perteneceA(_, Equipo)).
   #+END_SRC

** Inversibilidad

   #+BEGIN_SRC prolog
     /*
     ENUNCIADO:
     Al juego anterior queremos agregarle un nuevo requerimiento:
     saber si un equipo es cipayo, esto ocurre cuando existen al menos dos miembros
     del equipo que también juegan para otro equipo.

     Escribí el predicado equipoCipayo/1. Asumí que contás con el predicado perteneceA/2,
     que relaciona a un participante con el equipo al que pertenece

     Error que cometías:
      - Interpreté que ambos jugadores debian pertenecer a un equipo diferente, luego que debia ser el mismo

     Solución?
      - Cree una abstracción que sólo diga si pertenecen a otro equipo, pero no tenían porque estar relacionados
        con este otro equipo. Sólo que pertenecen al mismo, y que jugaban en otro.
     ,*/

     equipoCipayo(Equipo):-
         juegaParaOtro(MiembroA, Equipo),
         juegaParaOtro(MiembroB, Equipo),
         MiembroA \= MiembroB.


     juegaParaOtro(Miembro, Equipo):-
         perteneceA(Miembro, Equipo),
         perteneceA(Miembro, OtroEquipo),
         OtroEquipo \= Equipo.
   #+END_SRC

* Conceptos Mumuki
  Individuos
  - Simples: átomos, números
  - Compuestos: functores (tuplas)

** Functores
*** Conceptos
   - Son individuos que nos permiten agrupar a otros individuos para formar una abstracción más compleja.
   - Son similares a una tupla, pero con nombre.
   - No puede haber espacios entre el nombre del functor y el parentesis de apertura
   - Los nombres de los functores no pueden ser variables
   - Las componentes de un functor pueden ser variables (pero no del functor)

    #+BEGIN_SRC prolog
      personaje(jonSnow, stark(18, hombre)).
      personaje(sansa, stark(15, mujer)).
      
      % personaje(Nombre, Persona) es un predicado
      % stark(Edad, Sexo) es un functor (osea un individuo)
      % el nombre del functor es "stark", mientras que Edad y Sexo son los parametros que acepta (variables)
 
      % -? personaje(Nombre, stark(Edad, mujer)).
      % Nombre = sansa,
      % Edad = 15;
      % Nombre = arya;
      % Edad = 14.
    #+END_SRC

*** Posibles errores
    #+BEGIN_SRC prolog
      % esto está mal..  el functor no puede tener de nombre el guión bajo
      % personajesMujeres(Nombre) :-
      %    personaje(Nombre, _(_, mujer)).

      % esto esta bien (aunque con logica repertida)
      personajeMujer(Nombre) :-
          personaje(Nombre, stark(_, mujer)).
      personajeMujer(Nombre) :-
          personaje(Nombre, lannister(_, mujer)).

      % esto otro está mejor que el anterior (sin logica repetida)
      personajeMujer(Nombre) :-
          % los functores stark(,mujer) y lannister(_,mujer)
          % los generalizo como un solo individuo
          personaje(Nombre, Personaje),
          % delego, creando una abstraccion de quien es mujer
          esMujer(Personaje).

      esMujer(stark(_, mujer)).
      esMujer(lannister(_, mujer)).

   #+END_SRC

*** Diferencia functor vs predicado
    Por ejemplo, *feriado(20160501, diaDelTrabajador)* podría ser
    - Un *functor* del que sabemos su fecha y conmemoración
    - Un *predicado* que relacione a una fecha con una conmemoración
     
    Para darnos cuenta, tenemos que ver el *contexto*:
    - Los *predicados* pueden aparecer como condiciones de una consulta,
    y se declaran en la base de conocimientos.
    - Mientras que los *functores* son individuos que no tienen valor de verdad,
    y por tanto pueden aparecer en cualquier lugar en donde podríamos tener un individuo. 
   
    #+NAME: Errores con functores
    #+BEGIN_SRC prolog
      %% Primer Ejemplo
      %% esta consulta no funcionaria, porque lobo es un "functor"
      %% porque si es un "functor" es un "individuo" y no tiene valor de verdad
      lobo(X).

      %% Segundo Ejemplo
      %% vende/2 es un predicado, tiene como 1er argumento un individuo simple
      %% y como 2do parámetro un individuo compuesto osea un functor canilla/3 que recibe 3 variables
      vende(pepe, canilla(Forma,Material,Color)).
      %% estas dos clausulas de abajo son hechos (no son functores, porque no están dentro de un predicado)
      %% ambos hechos forman el predicado canilla/3 (conjunto de clausulas, que en este caso son hechos)
      canilla(triangular,hierro,azul).
      canilla(triangular,porcelana,blanco).

      %% esta consulta no funcionará,
      %% respondera con un functor que no tiene datos
      %% ?- vende(pepe, CosaQueVende).
      %% CosaQueVende = canilla(_G9, _G10, _G11).
    #+END_SRC
    
    #+NAME: Solucion a los errores anteriores
    #+BEGIN_SRC prolog
      %% Creamos un predicado vende/2
      %% esta vez con un functor canilla/3 que tiene datos
      vende(pepe, canilla(triangular,hierro,azul)).

      %% Hacemos las siguiente consulta
      % ?- vende(pepe, QueVende).
      % QueVende = canilla(triangular, hierro, azul)
      %
      % ?- vende(pepe, canilla(triangular,Material,Color)).
      % Material = hierro,
      % Color = azul
    #+END_SRC
    
    #+NAME: Otros ejemplos que funcionan
    #+BEGIN_SRC prolog
      vende(pepe, tornillo(Medida, parker)):-
          between(1, 3, Medida).

      %% Algunas consultas podrìan ser:
      %%
      %% ?- vende(pepe, tornillo(Medida, parker)).
      %% Medida = 1.
      %% Medida = 2.
      %% Medida = 3.
    #+END_SRC

*** Pattern Matching
    - Cada functor es diferente aunque tengan el mismo nombre
    - Si dos functores tienen *distinta aridad*, entonces son distintos
      No es lo mismo superman/1 que superman/2
      
      #+BEGIN_SRC prolog
        %% personaje/2 es un predicado
        %% superman/1 y superman/2 son functores DIFERENTES
        %% cada linea es una clausula

        personaje(jon,superman(23,gema(roja))).  % clausula, que genera un hecho
        personaje(jon,superman(21,gema(negra))). % clausula, genera otro hecho
        personaje(sam,superman(25)).             % clausula, genera otro hecho más
        % - las 3 clausulas (hechos) forman un predicado personaje/2
        % - cada clausula tiene un individuo simple como primer parámetro,
        % y un individuo compuesto (un functor) como segundo parámetro
      #+END_SRC

*** Referencias
    - [[http://wiki.uqbar.org/wiki/articles/paradigma-logico---functores.html][Functores - Wiki Uqbar]]
    - [[http://wiki.uqbar.org/wiki/articles/polimorfismo-en-el-paradigma-logico.html][Polimorfismo - Wiki Uqbar]]
    - [[https://github.com/pdep-mit/ejemplos-de-clase-prolog/blob/master/clase3.pl][Ejemplo de Clase 3]]
    - [[https://github.com/pdep-mit/ejemplos-de-clase-prolog/blob/master/clase4.pl][Ejemplo de Clase 4]]
* Conceptos WikiUqbar/Apuntes de la Catedra
** Conceptos básicos
*** Declaratividad
   - Se evita el algoritmo(procedimientos)
   - Se define *que* se quiere hacer, no interesa *como* lo hace por dentro 
     eso favorece la *abstracción*
   - En *prolog* declaramos conocimiento a traves de los *predicados* en un archivo .pl,
     luego al hacer las consultas al *motor de inferencias* (en este caso prolog) 
     se encarga de crear un algoritmo para resolver esas consultas (que no nos interesa)

*** Definición de un predicado
   + *Por extensión*, es mediante *hechos*
     - Es la manera que generamos la base de conocimiento.
     - Ej. Animales={oso, tigre, vaca}
   + *Por comprensión*, es mediante *reglas*
     - Sirve para generalizar
     - Ej. animal(Cual)

*** Aridad de un predicado
   - Es la cantidad de parámetros que tiene
   - Segun su aridad se clasifica en
     * *Monadico* si tiene 1 parámetro
     * *Poliádico* si tiene 2 o más parámetros
       Ej. Si tiene dos, expresa una relación entre dos *individuos* (ó átomos)

*** Unificación
   - Se da cuando hay *variables libres* (incognitas) que se resuelven con uno o más valores
   - Cuando creo otras reglas que utilizan esas *variables libres* las estoy unificando/ligando
   - Esta entrelazado con *inversibilidad*, si hay *variables libres* sin ligar no es inversible
     Ej. Los hechos son inversibles, las reglas pueden o no depende si quedan variables libres por ligar/unificar

     #+NAME: Unificación con hechos 
     #+BEGIN_SRC prolog
       %% persona/1 es un predicado formado por dos clausulas que son hechos
       %% son afirmaciones

       %% es cierto que pedro es persona
       persona(pedro).
       %% es cierto que fede es persona
       persona(fede).

       %% Cuando hacemos la consulta a prolog
       %% Quien, es la incognita que se unifica con todos los individuos que satifascen el predicado persona/1
       %% pedro y fede son los valores que satisfacen (ó hacen la verdad)

       %% ?- persona(Quien).
       %% Quien = pedro
       %% Quien = fede
     #+END_SRC

     #+NAME: Unificación con reglas 1
     #+BEGIN_SRC prolog
       %% viveEn/2 es un "predicado" poliadico, formado por 4 clausulas que son "hechos"
       %%
       %% es cierto que tefi vive en lanus
       viveEn(tefi, lanus).
       %% es cierto que gise vive en lanus
       viveEn(gise, lanus).
       viveEn(alf, lanus).
       viveEn(dodain, liniers).

       %% docente/1 es un "predicado" moniadico, formado por 4 clausulas que son "hechos"
       %%
       %% es cierto que alf es docente
       docente(alf).
       %% es cierto que tefi es docente
       docente(tefi).
       docente(gise).
       docente(dodain).

       %% afortunado/1 es un "predicado" moniadico, formado por una clausula que es una "regla compuesta"
       %% es una regla compuesta, porque separar las condiciones docente/1 y viveEn/2 por una coma es como
       %% utilizar el "operador lógico ò" que es la disyunción
       %%
       %% Qué se unifica?
       %% Se unifica la variable libre Persona
       %%
       %% Cuando se unifica?
       %% 1. Persona se unifica a todos los "individuos" que satisfacen el predicado docente/1
       %% 2. Cuando trata de satisfacer vivenEn/2 ya no hay incognitas, porque se encontraron en docente/1
       %% además lanus es un átomo, por tanto no quedan incognitas.
       %
       %% NOTA: Al no quedar "variables libres" sin unificar, el predicado afortunado/1 es "inversible"
       %%
       %% Si una Persona es docente y vive en lanus, entonces es afortunado
       afortunado(Persona):-
           %% unifico la variable libre Persona con docente/2
           docente(Persona),
           %% cuando se encuentra todos los individuos, sigue con vivenEn/2
           %% solo queda que me responda
           viveEn(Persona, lanus).
     #+END_SRC
     
     #+NAME: Unificación con reglas 2
     #+BEGIN_SRC prolog
       %% progenitor/2 es un "predicado" poliádico, formado por 5 "clausulas" que son "hechos"
       %% que relaciona dos individuos
       progenitor(abe, homero).
       progenitor(homero, bart).
       progenitor(homero, lisa).
       progenitor(homero, maggie).
       progenitor(marge, bart).
       progenitor(marge, lisa).
       progenitor(marge, maggie).

       %% abuelo/2 es un "predicado" poliádico, formado por 1 "clausula" que es una "regla compuesta"
       %% es una "regla compuesta" porque separa con una coma (operador Y lógico/conjunción en prolog) las
       %% dos clausulas progenitor/2 que son hechos
       abuelo(Abuelo, Nieto):-
           progenitor(Abuelo, Padre),
           progenitor(Padre, Nieto).

       %% si hacemos la siguiente consulta
       %% ?- abuelo(Quien, bart)
       %% Quien = abe
       %%
       %% Quien, es la "variable libre" que PROLOG el "motor de inferencia" unificó con el valor "abe"
       %% la variable era una "incognita", que el motor trató de resolver dentro del paradigma lógico
       %% (ese como lo hizo no es necesario saberlo, solo que lo hizo).
       %% por tanto, el resultado posible era "abe" que resolvia esa incognita "Quien"

       %% si hacemos esta otra consulta
       %% ?- progenitor(homero, Quien)
       %% Quien = bart
       %% Quien = lisa
       %% Quien = maggie
       %%
       %% Cuando hay multiples resultados que dan solución a la incognita,
       %% se van unificando a los distintos valores (en este caso bart, lisa, maggie)
     #+END_SRC
*** Consultas Existenciales e Individuales
    Esto va de la mano con *inversibilidad* y *unificación*
    
    + Las consultas *Existenciales*
      - Cuando se le pasa a una consulta una *variable libre* (incognita) para que
        el motor de inferencia resuelva quienes (que individuos/atomos) dan solución a la consulta.
      - Cuando son varios los resultados que dan solución a la consulta,
        se unifican a los individuos/atomos/valores
    + Las consultas *Individuales*
      - Cuando se le pasa a una consulta un *individuo* (átomo/valor)
        
    #+BEGIN_SRC prolog
      persona(homero).
      persona(marge).

      %% Consultas existenciales serian
      %% pregunto quien es persona,
      %% y me responde quienes hacen verdad la consulta (homero y marge)
      %%
      %% ?- persona(Quien)
      %% Quien = homero
      %% Quien = marge
      %%
      %% Consultas individuales serían
      %% pregunto si es cierto que homero es persona
      %% y me respondi que si
      %%
      %% ?- persona(homero)
      %% true
      %%
      %% ?- persona(marge)
      %% true
    #+END_SRC
    
*** Hechos y Reglas
    - Un *hecho* es una afirmación
    - Una *regla* es una condición con antecedente=>consecuente, que puede ser:
      - es *regla simple* si sólo tiene una condición
      - es *regla compuesta* si tiene varias condiciones conectadas con operadores lógicos (AND, OR)
        Los operadores lógicos separan las clausulas, por ejemplo el operador lógico OR (disyunción) es el punto
        mientras que el operador logico AND (conjunción) es el punto

   #+BEGIN_SRC prolog
     %% Los siguientes son hechos
     %%
     %% persona/2 es un predicado formado por dos clausulas que son hechos
     persona(homero).
     persona(bart).
     %% mascota/2 es otro predicado formado por tres clausulas que son hechos
     mascota(firulay).
     mascota(margaret).
     mascota(pepito).

     duenio(homero, firulay).
     duenio(bart, margaret).

     tieneCasa(homero).
     tieneCasa(bart).

     %% Las siguientes son reglas
     %%
     %% suertudo/1 es una regla simple
     %% porque tiene solo una condición duenio/2
     %%
     %% si la persona es duenio de alguna mascota, entonces es suertudo
     suertudo(Persona):- duenio(Persona, _).

     %% triste/1 es una regla compuesta
     %% porque tiene dos condiciones conectadas por un "Y logico" (conjunción)
     %%
     %% si una persona es duenio de alguna mascota pero no tiene casa, entonces está triste
     triste(Persona):-
         duenio(Persona,_),
         not(tieneCasa(Persona)).

     %% feliz/1 es una regla compuesta
     %% porque tiene dos condiciones conectadas por un "O lógico" (disyuncion)
     %% la disyunción se forma cuando un predicado tiene varias reglas conectadas por un punto
     %%
     %% si una persona es duenio de alguna mascota ó tiene una casa, entonces es feliz
     feliz(Persona):- duenio(Persona,_).
     feliz(Persona):- tieneCasa(Persona).
   #+END_SRC

*** Inversibilidad
      + Un *predicado* es inversible, si los *parámetros* pueden usarse como entrada/salida
        - De *entrada* quiere decir que se puede pasarle un *individuo* (simple/compuesto)
        - De *salida* quiere decir que se puede pasarle una *variable libre sin unificar* (incognita)
*** Ejemplos
    #+BEGIN_SRC prolog
      %% Predicado vive/2 formado por 4 clausulas que son hechos
      %% es cierto que ruben vive en lanus
      vive(ruben,lanus).
      %% es cierto que ana vive en lanus
      vive(ana,lanus).
      vive(laura,boedo).
      vive(susi,bernal).

      %% Predicado sonVecinos/2 formado por una clausula que es una regla compuesta
      %% Si dos personas viven en la misma Zona, entonces son vecinos
      %% dos personas son vecinos,
      sonVecinos(Persona1,Persona2):-
          % si tienen en comun(relación) una Zona
          vive(Persona1,Zona),
          vive(Persona2,Zona),
          % y confirmamos que no estamos relaciondo a una sola persona consigo misma
          % sinó dos personas distintas
          Persona1 \= Persona2.

      %% Predicado esDelSur/2 formado por dos clausulas que forman una regla compuesta
      %% Si la Persona vive en lanus ó bernal, entonces es del Sur
      esDelSur(Persona):- vive(Persona,lanus).
      esDelSur(Persona):- vive(Persona,bernal).
    #+END_SRC
*** Referencias
    - [[http://wiki.uqbar.org/wiki/articles/paradigma-logico---inversibilidad.html][Inversibilidad - Uqbar]]
    - [[http://wiki.uqbar.org/wiki/articles/polimorfismo-en-el-paradigma-logico.html][Polimorfismo]]
* Referencias
  - [[https://phpmagazine.net/2018/11/tau-prolog-a-prolog-interpreter-fully-in-javascript.html][Prolog interpreter fully in Javascript]]
  - [[http://jacinto-davila.blogspot.com/][Bitacoras de Cursos de Lógica]]
  - [[http://webdelprofesor.ula.ve/ingenieria/jacinto/logica/manual-prolog.html][Manual de Prolog]]
  - [[https://pengines.swi-prolog.org/docs/index.html][Web Logic Programming - Pengines]]
  - [[http://tau-prolog.org/downloads][Tau Prolog - Javascript]]
  - [[http://www.pathwayslms.com/swipltuts/html/index.html][Creating Web Applications in Swi-Prolog]]
  - [[https://github.com/Anniepoo/swiplwebtut][Creating web app in swi-prolog]]

  Otros
  - http://www.exa.unicen.edu.ar/catedras/prog_exp/apuntes/clase3.pdf
  - http://www.dccia.ua.es/logica/prolog/docs/prolog.pdf
  - http://www.lcc.uma.es/~lopez/progdec/prolog/apuntes/02-basicas/basicas4pp.pdf
  - http://mural.uv.es/mijuanlo/PracticasPROLOG.pdf
  - http://www.cs.us.es/~jalonso/publicaciones/2006-ej_prog_declarativa.pdf
  - https://www2.infor.uva.es/~calonso/Ingenieria%20Conocimiento-Grado%20Informatica/Practicas/Practica%20I%20Prolog.pdf
  - http://zeus.inf.ucv.cl/~rsoto/cursos/INF152/Cap4_Parte2_6ppt_INF152.pdf
  - http://di002.edv.uniovi.es/~labra/FTP/Logica/prac/plog403.pdf
  - https://labsys.frc.utn.edu.ar/ppr-2009/Unidad%20V%20-%20Paradigma%20Logico/Apunte/Unidad%20VI%20-%20Paradigma%20LOGICO.pdf
  - https://elvex.ugr.es/decsai/intelligent/workbook/ai/PROLOG.pdf
  - http://riul.unanleon.edu.ni:8080/jspui/bitstream/123456789/2783/1/210308.pdf
  - https://ccc.inaoep.mx/~emorales/Cursos/Prolog/curso.pdf
  - https://www.youtube.com/watch?v=-GlpnUtnKIM

* Ejercicios Resueltos
  - [[https://docs.google.com/document/d/1FULjGcfEuBnoSGCziwPEWCMmv-Nqn0_uTy52C-iiqCE/edit][Parcial Medicamentos]]
  - [[https://gist.github.com/fedescarpa/a8ff448588b725cd2301e7177bb02f31][Resoluciòn Parcial Medicamentos]]
  - [[https://gist.github.com/fedescarpa/ab1e7866786258a176bb8a15669552a5][Resolución Parcial PapaNoel]]
